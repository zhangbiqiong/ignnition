{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "http://example.com/product.schema.json",
    "title": "Model description",
    "description": "The description of the model that the framework will use",
    "type": "object",
    "properties": 
    {
        "entities": {
            "description": "Definition of the entities",
            "type": "array",
            "uniqueItems": true,
            "items": {
              "type": "object",
              "properties": {
                  "name": {
                      "description": "Name of the entity",
                      "type": "string"
                  },
                  "hidden_state_dimension": {
                      "description": "Size of the hidden state of this entity",
                      "type": "number",
                      "exclusiveMinimum": 0

                  },
                  "features": 
                 {
                    "type": "array",
                    "items":
                    {
                        "description": "Feature names of this entity",
                        "type": "object",
                        "properties": 
                        {
                            "name": 
                            {
                                "description": "Name of the feature",
                                "type": "string"
                            },
                            "normalization":
                            {
                                "description": "What kind of regularization apply to this feature",
                                "type": "string"
                            }
                        },
                        "required": ["name"]
                    }
                  }
              },
              "required": ["name", "hidden_state_dimension", "features"]
            }},

        "message_passing": 
        {
            "description": "Message passing strategy",
            "type": "object",
            "properties": 
            {
                "num_iterations": 
                {
                    "description": "Number of iterations the algorithm",
                    "type": "number",
                    "exclusiveMinimum": 0
                },
                "architecture": 
                {
                    "type": "array",
                    "items": 
                    {
                        "description": "Definition of each of the inner steps for each iteration",
                        "type": "object",
                        "properties": 
                        {
                            "step_name": {
                                "type": "string"
                            },
                            "mp_step":
                            {
                                "type": "array",    
                                "items": {
                                    "description": "Definition of a single essage passing from source to destination",
                                    "type": "object",
                                    "properties": {
                                        "type": {
                                            "description": "Type of message passing",
                                            "type": "string",
                                            "enum": ["single_source", "multi_source"]
                                        },
                                        "source_entity": {
                                            "description": "Name of the source entity sending the messages",
                                            "type": "string"
                                        },
                                        "destination_entity": {
                                            "description": "Name of the destination entity receiving the messages",
                                            "type": "string"
                                        },
                                        "adj_vector": {
                                            "description": "Name of the adjacency list which defines the adjacencies from the source to the destiantion entity.",
                                            "type": "string"
                                        },
                                        "message":
                                        {
                                            "type": "array",
                                            "items": {
                                                "description": "Define each of the operations for the message creation function",
                                                "type": "object",
                                                "properties":
                                                {
                                                    "type":
                                                    {
                                                        "description": "Type of operation to apply",
                                                        "type": "string",
                                                        "enum": ["neural_network", "direct_assignation"]
                                                    },
                                                    "nn_name":
                                                    {
                                                        "description": "Reference the neural network to be used",
                                                        "type": "string"
                                                    },
                                                    "input":
                                                    {
                                                        "description": "Input of this operation",
                                                        "type": "array",
                                                        "items":{
                                                            "description": "define the inputs",
                                                            "type": "string"
                                                        }
                                                    },
                                                    "output_name":
                                                    {
                                                        "description": "Define an output name for the result, to reference it later",
                                                        "type": "string"
                                                    }
                                                },
                                                "if": {
                                                    "properties": { "type": { "const": "neural_network" } }
                                                },
                                                "then": {
                                                    "required": ["nn_name", "input"]
                                                },
                                                "required": ["type"]

                                            }
                                            
                                        },
                                        "aggregation": {
                                            "description": "How the messages are combined by the destination source",
                                            "type": "string",
                                            "enum": ["sum", "ordered", "combination", "attention"]
                                        },
                                        "update": 
                                        {
                                            "type": "object",
                                            "properties":
                                            {
                                                "type":
                                                {
                                                    "description": "Type of operation for the update given the aggregated and the current hs",
                                                    "type": "string",
                                                    "enum": ["neural_network", "recurrent_neural_network"]
                                                },
                                                "nn_name":
                                                {
                                                    "description": "Reference the neural network to be used",
                                                    "type": "string"
                                                }
                                            },
                                            "allOf": 
                                            [
                                                {
                                                    "if": {
                                                        "properties": { "type": { "const": "neural_network" } }
                                                    },
                                                    "then": {
                                                        "required": ["nn_name"]
                                                    }
                                                },
                                                {
                                                    "if": {
                                                        "properties": { "type": { "const": "recurrent_neural_network" } }
                                                    },
                                                    "then": {
                                                        "required": ["nn_name"]
                                                    }
                                                }
                                            ]
                                        }
                                        
                                    },
                                    "if": {
                                        "properties": { "type": { "const": "multi_source" } },
                                        "required": ["type"]
                                    },
                                    "then": {
                                        "properties": { "aggregation": {"const": "combination"}}
                                    },
                                    "else": {
                                        "properties": {"aggreagation": {"enum": ["sum", "ordered"]}},
                                        "required": ["update"]
                                    },
                                    "required": ["type", "source_entity", "destination_entity", "aggregation", "message", "adj_vector"]
                                    
                                }
                            }
                        },
                        "require": ["mp_step", "step_name"]
                    }
                },
                "combined_message_passing_options":
                {
                    "type": "array",
                    "items":
                    {
                        "description": "Combined message passing with several source entities to the same destination entity in the same step of the algorithm.",
                        "type": "object",
                        "properties": 
                        {
                            "step": {
                                "description": "Step of the algorithm in which it is found",
                                "type": "string"
                            },
                            "destination_entity": {
                                "description": "Destination entity receiving messages from several source entities.",
                                "type": "string"
                            },
                            "message_combination": {
                                "description": "Describes how the messages received are combined.",
                                "type": "string",
                                "enum": ["concatenation", "interleave"]
                            },
                            "combination_definition": {
                                "description": "Descrives how the interleaving is done",
                                "type": "string"
                            },
                            "update": {
                                "type":"object",
                                "properties":
                                {
                                    "type":
                                    {
                                        "description": "Type of operation to be performed",
                                        "type": "string",
                                        "enum": ["neural_network", "recurrent_neural_network"]
                                    },
                                    "nn_name":
                                    {
                                        "description": "Reference the neural network to be used",
                                        "type": "string"
                                    }
                                },
                                "required": ["nn_name"]   
                            }
                        },
                        "if": {
                            "properties": { "message_combination": { "const": "interleave" } },
                            "required": ["combination_definition"]
                        },
                        "required": ["step", "destination_entity", "message_combination", "update"]
                    }
                }

            },
            "required": ["num_iterations", "architecture"]
        },
        "readout":
        {
            "type": "array",
            "items": 
            {
                "description": "Readout model which will make predictions using the hidden states of one entity type",
                "type": "object",
                "properties": 
                {
                    "type": 
                    {
                        "description": "Type of operation",
                        "type": "string",
                        "enum" : ["predict", "pooling"]
                    },
                    "type_pooling":
                    {
                        "description": "Type of operation to do pooling with",
                        "type": "string",
                        "enum": ["sum", "max", "mean"]
                    },
                    "input": 
                    {
                        "description": "Entity the hidden states of which we want to use for the prediction or name of a previous output name.",
                        "type": "string"
                    },
                    "label": 
                    {
                        "description": "Label matching the dataset which contains the true labels of the predictions we aim to make.",
                        "type": "string"
                    },
                    "label_normalization":
                    {
                        "description": "Normalization of the label",
                        "type": "string"
                    },
                    "label_denormalization":
                    {
                        "description": "Denormalization of the label",
                        "type": "string"
                    },
                    "nn_name":
                    {
                        "description": "References the neural network to use as readout",
                        "type": "string"
                    },
                    "output_name":
                    {
                        "description": "Define an output name for the result, to reference it later",
                        "type": "string"
                    }
                },
                "if":
                {
                    "properties": { "type": { "const": "predict" } }
                },
                "then":
                {
                    "require": ["nn_name", "label"]
                },
                "else":
                {
                    "require": ["type_pooling", "output_name", "input"]
                },
                "required": ["type"]
            }
        },

        "neural_networks":
        {
            "description": "Here we describe all the feed_forward models that will be referenced later",
            "type": "array",
            "items":
            {
                "description": "Single feed_forward model",
                "type": "object",
                "properties":
                {
                    "nn_name":
                    {
                        "description": "Define the name of the model",
                        "type": "string"
                    },
                    "nn_type":
                    {
                        "description": "Define the type of neural network",
                        "type": "string",
                        "enum": ["feed_forward", "recurrent_neural_network"]
                    },
                    "recurrent_type":
                    {
                        "description": "Type of recurrent neural network",
                        "type": "string",
                        "enum": ["GRU", "LSTM"]
                    },
                    "nn_architecture":
                    {
                        "description": "Define the architecture",
                        "type": "array",
                        "items": 
                        {
                            "description": "Definition of a single layer of the neural network",
                            "type":"object",
                            "properties": 
                            {
                                "type_layer": {
                                    "description": "Type of layer",
                                    "type": "string"
                                },
                                "name": {
                                    "description": "Name given to this layer.",
                                    "type": "string"
                                }
                            }


                        },
                        "required": ["type_layer"]
                    }
                },
                "if": {
                    "properties": { "nn_type": { "const": "feed_forward" } }
                },
                "then":
                {
                    "required": ["nn_architecture"]
                },
                "else":
                {
                    "required": ["recurrent_type"]
                },
                "required": ["nn_name", "nn_type"]
            }

        },


        "learning_options":
        {
            "description": "Definition of training hyperparameters",
            "type": "object",
            "properties": 
            {
                "loss": 
                {
                    "description": "Name of the loss function to use",
                    "type": "string"
                },
                "optimizer": 
                {
                    "description": "Definition of the optimizer to use.",
                    "type": "object",
                    "properties":
                    {
                        "type":
                        {
                            "description": "Name of the optimizer.",
                            "type": "string"
                        }
                    }
                },
                "schedule": 
                {
                    "description": "Definition of the schedule to use",
                    "type": "object",
                    "properties": 
                    {
                        "type": 
                        {
                            "description": "Name of the schedule type",
                            "type": "string"
                        }
                    }
                }

            },
            "required": ["loss", "optimizer"]

        }

    }
}
    